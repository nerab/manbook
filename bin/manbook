#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

help = <<HELP
The manbook command can be used to produce an eBook from one or more man pages.

Author: Nicolas E. Rabenau nerab@gmx.at
Homepage: http://rubydoc.info/gems/manbook/file/README.md

Basic Usage:

    manbook <MANPAGE>
    manbook <MANPAGE1> [<MANPAGE2> ...]
    manbook <MANPAGE> --output <DIRECTORY>
    manbook <MANPAGE1> [<MANPAGE2> ...] --output <DIRECTORY>
    manbook --all --output <DIRECTORY>

Options:
HELP

def usage
  "Run '#{File.basename(__FILE__)} --help' for further help."
end

require 'optparse'
require 'manbook'

output_dir = '.'

opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("--verbose", "Verbose mode - displays additional diagnostic information") do |file|
    ManBook.logger = Logger.new(STDERR)
    ManBook.logger.formatter = ManBook::LogFormatter.new
    ManBook.logger.level = Logger::INFO
  end

  opts.on("--trace", "Trace (debug) mode - displays debug information and stack traces") do |file|
    ManBook.logger = Logger.new(STDERR)
    ManBook.logger.formatter = ManBook::LogFormatter.new
    ManBook.logger.level = Logger::DEBUG
  end

  opts.on("--version", "Display current version") do
    puts "#{File.basename(__FILE__)} " + ManBook::VERSION
    exit 0
  end

  opts.on("--all", "Create a book with all man pages") do |dir|
    ManBook.logger.info "Creating a book with all man pages"
    raise "Not yet implemented"
  end

  opts.on("--output DIR", "Use DIR as output directory") do |dir|
    ManBook.logger.info "Using '#{dir}' as output directory"
    output_dir = dir
    unless File.exist?(output_dir)
      ManBook.logger.info "Creating output directory as it does not exist yet: #{output_dir}"
      Dir.mkdir(output_dir)
    end
  end
end

error_count = 0

begin
  opts.parse!

  raise "Which man page do you want to convert?" if ARGV.empty?

  ARGV.each{|man_page|
    html_file = File.join(output_dir, "#{File.basename(man_page)}.html")
    ManBook.logger.debug("Output page is #{html_file}")

    begin
      ManBook::HtmlFormatter.new(man_page).convert(html_file)
    rescue ManBook::ManPageNotFoundError => e
      ManBook.logger.error e.message
      ManBook.logger.debug "Backtrace:\n#{e.backtrace.join("\n")}"
      error_count += 1
    end
  }
rescue
  ManBook.logger.error $!.message
  ManBook.logger.debug "Backtrace:\n#{$!.backtrace.join("\n")}"
  ManBook.logger.info usage
  exit(1)
end

exit error_count
