#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'rubygems'

help = <<HELP
The manbook command can be used to produce an eBook from one or more man pages.

Author: Nicolas E. Rabenau nerab@gmx.at
Homepage: http://rubydoc.info/gems/manbook/file/README.md

Basic Usage:

    manbook <MANPAGE>
    manbook <MANPAGE1> [<MANPAGE2> ...]
    manbook <MANPAGE> --output <DIRECTORY>
    manbook <MANPAGE1> [<MANPAGE2> ...] --output <DIRECTORY>
    manbook --all --output <DIRECTORY>

Options:
HELP

def usage
  "Run '#{File.basename(__FILE__)} --help' for further help."
end

require 'optparse'
require 'open3'
require 'manbook'

output_dir = '.'

opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("--verbose", "Verbose mode - displays additional diagnostic information") do |file|
    ManBook.logger = Logger.new(STDERR)
    ManBook.logger.formatter = ManBook::LogFormatter.new
    ManBook.logger.level = Logger::INFO
  end

  opts.on("--trace", "Trace (debug) mode - displays debug information and stack traces") do |file|
    ManBook.logger = Logger.new(STDERR)
    ManBook.logger.formatter = ManBook::LogFormatter.new
    ManBook.logger.level = Logger::DEBUG
  end

  opts.on("--version", "Display current version") do
    puts "#{File.basename(__FILE__)} " + ManBook::VERSION
    exit 0
  end

  opts.on("--all", "Create a book with all man pages") do |dir|
    ManBook.logger.info "Creating a book with all man pages"
    raise "Not yet implemented"
  end

  opts.on("--output DIR", "Use DIR as output directory") do |dir|
    ManBook.logger.info "Using '#{dir}' as output directory"
    output_dir = dir
    Dir.mkdir(output_dir) unless File.exist?(output_dir)
  end
end

def html_name(man_page_file)
  "#{File.basename(man_page_file)}.html"
end

def convert_to_html(man_page, html_file_name)
  # locate the man file
  man_page_file = %x[man -w #{man_page} 2>/dev/null].chomp

  if 0 != $?
    raise ManBook::ManPageNotFoundError.new(man_page)
  end

  ManBook.logger.debug("Located man page at #{man_page_file}")
  
  # pipe through gunzip if gzipped
  if man_page_file =~ /\.gz$/
    cmd = "gunzip -c #{man_page_file} | groff -mandoc -T html > #{html_file_name}"
  else
    cmd = puts "groff -mandoc #{man_page_file} -T html > #{html_file_name}"
  end
  
  ManBook.logger.debug("Executing #{cmd}")
  
  result = nil
  Open3.popen3(cmd){|stdin, stdout, stderr|
    result = stderr.read
  }
  
  if 0 == $?
    ManBook.logger.info "Successfully written '#{html_file_name}'"
  else
    raise ManBook::CommandFailedError.new(cmd, result)
  end
end

begin
  opts.parse!
  
  ARGV.each{|man_page|
    ManBook.logger.debug("Writing HTML for man page '#{man_page}'")
    
    html_file = File.join(output_dir, html_name(man_page))
    ManBook.logger.debug("Output page is #{html_file}")
    
    begin
      convert_to_html(man_page, html_file)
    rescue ManBook::ManPageNotFoundError => e
      ManBook.logger.error e.message
      ManBook.logger.debug "Backtrace:\n#{e.backtrace.join("\n")}"
    end
  }
rescue
  ManBook.logger.error $!.message
  ManBook.logger.debug "Backtrace:\n#{$!.backtrace.join("\n")}"
  ManBook.logger.info usage
  exit(1)
end
