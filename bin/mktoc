#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'rubygems'

help = <<HELP
Creates table of contents (TOC) files for all HTML files in a directory. This 
tool was built to prepare HTML pages for the Kindle.

Author: Nicolas E. Rabenau nerab@gmx.at
Homepage: http://rubydoc.info/gems/manbook/file/README.md

Basic Usage:

    mktoc <DIRECTORY>

Options:
HELP

def usage
  "Run '#{File.basename(__FILE__)} --help' for further help."
end

require 'optparse'
require 'manbook'
require 'erb'

# defaults
@book_title = "ManBook - a book of selected man pages"

opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("--verbose", "Verbose mode - displays additional diagnostic information") do |file|
    ManBook.logger = Logger.new(STDERR)
    ManBook.logger.formatter = ManBook::LogFormatter.new
    ManBook.logger.level = Logger::INFO
  end

  opts.on("--trace", "Trace (debug) mode - displays debug information and stack traces") do |file|
    ManBook.logger = Logger.new(STDERR)
    ManBook.logger.formatter = ManBook::LogFormatter.new
    ManBook.logger.level = Logger::DEBUG
  end

  opts.on("--version", "Display current version") do
    puts "#{File.basename(__FILE__)} " + ManBook::VERSION
    exit 0
  end

  opts.on("--title TITLE", "Use TITLE as book title") do |title|
    ManBook.logger.info "Setting book title to '#{title}'"
    @book_title = title
  end
end

def render(template, my_binding = binding)
  ERB.new(File.new(File.join(File.dirname(__FILE__), '..', 'templates', template)), 0, "%<>").result(my_binding)
end

begin
  opts.parse!
  
  INDEX_HTML = 'index.html'
  INDEX_OPF = 'index.opf'
  INDEX_NCX = 'index.ncx'
  OUTPUT_FILE = 'manbook.mobi'

  GENERATOR = "#{File.basename(__FILE__)} v" + ManBook::VERSION
  
  src_dir = ARGV.first
  ManBook.logger.debug("Operating in directory #{src_dir}")

  # find pages
  @pages = Dir.glob(File.join(src_dir, "*.html")).reject{|f| INDEX_HTML == File.basename(f)}.collect{|html_file|
    ManBook::Parser.parse(html_file)
  }.sort{|l,r| l[:title] <=> r[:title]}
  
  # build index.html
  File.open(File.join(src_dir, INDEX_HTML), 'w') {|f|
    f.write(render('index.html.erb'){
      @pages.collect{|page|
        begin
          render('_page.html.erb', binding)
        rescue
          ManBook.logger.error $!.message
          ManBook.logger.debug "Backtrace:\n#{$!.backtrace.join("\n")}"
        end
      }.join
    })
  }

  # build opf file
  File.open(File.join(src_dir, INDEX_OPF), 'w') {|f|
    f.write(render('manbook.opf.erb'))
  }

  # build ncx file
  File.open(File.join(src_dir, INDEX_NCX), 'w') {|f|
    f.write(render('manbook.ncx.erb'))
  }

  # print message how to call kindlegen
  ManBook.logger.info "Successfully finished building the book in #{src_dir}"
  ManBook.logger.info 'Call the following command in order to convert your book into the Kindle format:'
  ManBook.logger.info
  ManBook.logger.info "  kindlegen #{File.join(src_dir, INDEX_OPF)} -o #{OUTPUT_FILE}"
  ManBook.logger.info
  ManBook.logger.info "After that, the book will appear as #{File.join(src_dir, OUTPUT_FILE)}. You can"
  ManBook.logger.info "then open it with the Kindle app or mail it to your kindle."
rescue
  ManBook.logger.error $!.message
  ManBook.logger.debug "Backtrace:\n#{$!.backtrace.join("\n")}"
  ManBook.logger.info usage
  exit(1)
end
